### ----- General ----- ###
GENERAL:
  NAME: 'PVRCNNPP'
  COMMENT1: '0~72, -16~16, -2~7.6'
  COMMENT2: 'CenterPoint setting'
  COMMENT3: 'Multi-class (+ Bus or Truck)'
  VERSION: '2.0'
  SEED: 2023
  IS_CUDA_SEED: True
  IS_DETERMINISTIC: True
  DEVICE: 'gpu'
  RESUME:
    IS_RESUME: False
    PATH_EXP: # None
    START_EP: # None
    IS_COPY_LOGS: True

  LOGGING:
    IS_LOGGING: True
    PATH_LOGGING: './logs'
    IS_SAVE_MODEL: True
    INTERVAL_EPOCH_MODEL: 1
    INTERVAL_EPOCH_UTIL: 5
### ----- General ----- ###

### ----- Dataset ----- ###
cfg_dataset_ver2: True
DATASET:
  NAME: 'KRadarDetection_v2_1_demo'

  NUM: # Total number of frames, just make this blank

  path_data:
    list_dir_kradar: ['/media/sun/SSD_mh/K-Radar/radar_bin_lidar_bag_files/generated_files']
    split: ['./resources/split/train.txt','./resources/split/test.txt']

    revised_label_v1_1: './tools/revise_label/kradar_revised_label_v1_1'
    revised_label_v2_0: './tools/revise_label/kradar_revised_label_v2_0/KRadar_refined_label_by_UWIPL'
    revised_label_v2_1: './tools/revise_label/kradar_revised_label_v2_1/KRadar_revised_visibility'
    revised_label_v_P: './auto_label/auto_labels/pvrcnn_inferenced_label_0_3_offset_3' # auto-labels path
  label_version: 'v_P'
  item: {
    'calib': True,
    'ldr64': True,
    'ldr128': False,
    'rdr': False,
    'rdr_sparse': False,
    'cam': False,
  }
  calib: {
    'z_offset': 0.7
  }
  ldr64: {
    'processed': False,
    'skip_line': 13,
    'n_attr': 9,
    'inside_ldr64': True,
    'calib': True,
    'n_used': 4, # x, y, z, intensity
  }
  rdr: {
    'cube': False,
  }
  rdr_sparse: {
    'processed': True,
    'dir': '/media/donghee/kradar/rdr_sparse_data/rtnh_wider_1p_1'
  }
  roi: {
    'filter': True,
    'xyz': [0.,-16.,-2.,72.,16.,7.6],
    'keys': ['ldr64'],
    'check_azimuth_for_rdr': False,
    'azimuth_deg': [-180,180],
    'grid_size': ,
    'voxel_size': [0.05, 0.05, 0.1], # xyz
  }
  label: { # (consider, logit_idx, rgb, bgr)
    'calib':            True,
    'onlyR':            False,
    'consider_cls':     True,
    'consider_roi':     True,
    'remove_0_obj':     True,
    'Sedan':            [True,  1,  [0, 1, 0],       [0,255,0]],
    'Bus or Truck':     [True,  2,  [1, 0.2, 0],     [0,50,255]],
    'Motorcycle':       [False, -1, [1, 0, 0],       [0,0,255]],
    'Bicycle':          [False, -1, [1, 1, 0],       [0,255,255]],
    'Bicycle Group':    [False, -1, [0, 0.5, 1],     [0,128,255]],
    'Pedestrian':       [False, -1, [0, 0, 1],       [255,0,0]],
    'Pedestrian Group': [False, -1, [0.4, 0, 1],     [255,0,100]],
    'Label':            [False, -1, [0.5, 0.5, 0.5], [128,128,128]],
  }
  collate_fn: 'v2_0'
  load_from_pickle: './pkl'
### ----- Dataset ----- ###

### ----- Model ----- ###
MODEL:
  SKELETON: PVRCNNPlusPlus

  PRE_PROCESSING:
    VER: 'v1_0'
    SHUFFLE_POINTS: True
    TRANSFORM_POINTS_TO_VOXELS: True
    MAX_POINTS_PER_VOXEL: 5
    MAX_NUMBER_OF_VOXELS: {
      'train': 16000,
      'test': 40000
    }
    
  VFE:
    NAME: MeanVFE

  BACKBONE_3D:
    NAME: VoxelBackBone8x

  MAP_TO_BEV:
    NAME: HeightCompression
    NUM_BEV_FEATURES: 640

  BACKBONE_2D:
    NAME: BaseBEVBackbone

    LAYER_NUMS: [5, 5]
    LAYER_STRIDES: [1, 2]
    NUM_FILTERS: [128, 256]
    UPSAMPLE_STRIDES: [1, 2]
    NUM_UPSAMPLE_FILTERS: [256, 256]

  DENSE_HEAD:
    NAME: CenterHead
    CLASS_AGNOSTIC: False

    CLASS_NAMES_EACH_HEAD: [
      # [ 'Sedan', 'Bus or Truck' ]
    ]

    SHARED_CONV_CHANNEL: 64
    USE_BIAS_BEFORE_NORM: True
    NUM_HM_CONV: 2
    SEPARATE_HEAD_CFG:
      HEAD_ORDER: [ 'center', 'center_z', 'dim', 'rot' ]
      HEAD_DICT: {
          'center': { 'out_channels': 2, 'num_conv': 2 },
          'center_z': { 'out_channels': 1, 'num_conv': 2 },
          'dim': { 'out_channels': 3, 'num_conv': 2 },
          'rot': { 'out_channels': 2, 'num_conv': 2 },
      }

    TARGET_ASSIGNER_CONFIG:
      FEATURE_MAP_STRIDE: 8
      NUM_MAX_OBJS: 500
      GAUSSIAN_OVERLAP: 0.1
      MIN_RADIUS: 2

    LOSS_CONFIG:
      LOSS_WEIGHTS: {
          'cls_weight': 1.0,
          'loc_weight': 2.0,
          'code_weights': [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]
      }

    POST_PROCESSING:
      SCORE_THRESH: 0.01
      POST_CENTER_LIMIT_RANGE: [ 0.,-16.,-2.,72.,16.,7.6 ] # [ -75.2, -75.2, -2, 75.2, 75.2, 4 ]
      MAX_OBJ_PER_SAMPLE: 500
      NMS_CONFIG:
          NMS_TYPE: nms_gpu
          NMS_THRESH: 0.7
          NMS_PRE_MAXSIZE: 4096
          NMS_POST_MAXSIZE: 500

  PFE:
    NAME: VoxelSetAbstraction
    POINT_SOURCE: raw_points
    NUM_KEYPOINTS: 4096
    NUM_OUTPUT_FEATURES: 90
    SAMPLE_METHOD: SPC
    SPC_SAMPLING:
      NUM_SECTORS: 6
      SAMPLE_RADIUS_WITH_ROI: 1.6

    FEATURES_SOURCE: ['bev', 'x_conv3', 'x_conv4', 'raw_points']
    SA_LAYER:
      raw_points:
        NAME: VectorPoolAggregationModuleMSG
        NUM_GROUPS: 2
        LOCAL_AGGREGATION_TYPE: local_interpolation
        NUM_REDUCED_CHANNELS: 1
        NUM_CHANNELS_OF_LOCAL_AGGREGATION: 32
        MSG_POST_MLPS: [ 32 ]
        FILTER_NEIGHBOR_WITH_ROI: True
        RADIUS_OF_NEIGHBOR_WITH_ROI: 2.4

        GROUP_CFG_0:
          NUM_LOCAL_VOXEL: [ 2, 2, 2 ]
          MAX_NEIGHBOR_DISTANCE: 0.2
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [ 32, 32 ]
        GROUP_CFG_1:
          NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
          MAX_NEIGHBOR_DISTANCE: 0.4
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [ 32, 32 ]

      x_conv3:
        DOWNSAMPLE_FACTOR: 4
        INPUT_CHANNELS: 64

        NAME: VectorPoolAggregationModuleMSG
        NUM_GROUPS: 2
        LOCAL_AGGREGATION_TYPE: local_interpolation
        NUM_REDUCED_CHANNELS: 32
        NUM_CHANNELS_OF_LOCAL_AGGREGATION: 32
        MSG_POST_MLPS: [128]
        FILTER_NEIGHBOR_WITH_ROI: True
        RADIUS_OF_NEIGHBOR_WITH_ROI: 4.0

        GROUP_CFG_0:
          NUM_LOCAL_VOXEL: [3, 3, 3]
          MAX_NEIGHBOR_DISTANCE: 1.2
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [64, 64]
        GROUP_CFG_1:
          NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
          MAX_NEIGHBOR_DISTANCE: 2.4
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [ 64, 64 ]

      x_conv4:
        DOWNSAMPLE_FACTOR: 8
        INPUT_CHANNELS: 64

        NAME: VectorPoolAggregationModuleMSG
        NUM_GROUPS: 2
        LOCAL_AGGREGATION_TYPE: local_interpolation
        NUM_REDUCED_CHANNELS: 32
        NUM_CHANNELS_OF_LOCAL_AGGREGATION: 32
        MSG_POST_MLPS: [ 128 ]
        FILTER_NEIGHBOR_WITH_ROI: True
        RADIUS_OF_NEIGHBOR_WITH_ROI: 6.4

        GROUP_CFG_0:
          NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
          MAX_NEIGHBOR_DISTANCE: 2.4
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [ 64, 64 ]
        GROUP_CFG_1:
          NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
          MAX_NEIGHBOR_DISTANCE: 4.8
          NEIGHBOR_NSAMPLE: -1
          POST_MLPS: [ 64, 64 ]


  POINT_HEAD:
    NAME: PointHeadSimple
    CLS_FC: [256, 256]
    CLASS_AGNOSTIC: True
    USE_POINT_FEATURES_BEFORE_FUSION: True
    TARGET_CONFIG: normal
    GT_EXTRA_WIDTH: [0.2, 0.2, 0.2]
    LOSS_CONFIG:
      LOSS_REG: smooth-l1
      LOSS_WEIGHTS: {
          'point_cls_weight': 1.0,
      }

  ROI_HEAD:
    NAME: PVRCNNHead
    CLASS_AGNOSTIC: True

    SHARED_FC: [256, 256]
    CLS_FC: [256, 256]
    REG_FC: [256, 256]
    DP_RATIO: 0.3

    NMS_CONFIG:
      TRAIN:
        NMS_TYPE: nms_gpu
        MULTI_CLASSES_NMS: False
        NMS_PRE_MAXSIZE: 9000
        NMS_POST_MAXSIZE: 512
        NMS_THRESH: 0.8
      TEST:
        NMS_TYPE: nms_gpu
        MULTI_CLASSES_NMS: False
        NMS_PRE_MAXSIZE: 1024
        NMS_POST_MAXSIZE: 100
        NMS_THRESH: 0.7
        SCORE_THRESH: 0.1

        # NMS_PRE_MAXSIZE: 4096
        # NMS_POST_MAXSIZE: 500
        # NMS_THRESH: 0.85


    ROI_GRID_POOL:
      GRID_SIZE: 6

      NAME: VectorPoolAggregationModuleMSG
      NUM_GROUPS: 2
      LOCAL_AGGREGATION_TYPE: voxel_random_choice
      NUM_REDUCED_CHANNELS: 30
      NUM_CHANNELS_OF_LOCAL_AGGREGATION: 32
      MSG_POST_MLPS: [ 128 ]

      GROUP_CFG_0:
        NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
        MAX_NEIGHBOR_DISTANCE: 0.8
        NEIGHBOR_NSAMPLE: 32
        POST_MLPS: [ 64, 64 ]
      GROUP_CFG_1:
        NUM_LOCAL_VOXEL: [ 3, 3, 3 ]
        MAX_NEIGHBOR_DISTANCE: 1.6
        NEIGHBOR_NSAMPLE: 32
        POST_MLPS: [ 64, 64 ]

    TARGET_CONFIG:
      BOX_CODER: ResidualCoder
      ROI_PER_IMAGE: 128
      FG_RATIO: 0.5

      SAMPLE_ROI_BY_EACH_CLASS: True
      CLS_SCORE_TYPE: roi_iou

      CLS_FG_THRESH: 0.75
      CLS_BG_THRESH: 0.25
      CLS_BG_THRESH_LO: 0.1
      HARD_BG_RATIO: 0.8

      REG_FG_THRESH: 0.55

    LOSS_CONFIG:
      CLS_LOSS: BinaryCrossEntropy
      REG_LOSS: smooth-l1
      CORNER_LOSS_REGULARIZATION: True
      LOSS_WEIGHTS: {
          'rcnn_cls_weight': 1.0,
          'rcnn_reg_weight': 1.0,
          'rcnn_corner_weight': 1.0,
          'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
      }

  POST_PROCESSING:
    RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
    SCORE_THRESH: 0.1
    OUTPUT_RAW_SCORE: False

    EVAL_METRIC: kitti

    NMS_CONFIG:
      MULTI_CLASSES_NMS: False
      NMS_TYPE: nms_gpu
      NMS_THRESH: 0.7
      NMS_PRE_MAXSIZE: 4096
      NMS_POST_MAXSIZE: 500
### ----- Model ----- ###

### ----- Optimizer ----- ###
get_loss_from: 'detector'
OPTIMIZER: # Training
  NAME: 'AdamW'
  check: 'check'

  LR: 0.001
  MIN_LR: 0.0001 # for scheduler
  BETAS: [0.9, 0.999]
  WEIGHT_DECAY: 0.01
  MOMENTUM: 0.9

  BATCH_SIZE: 2
  NUM_WORKERS: 4 # 0 for dataloader_error / 4 for batch 16

  MAX_EPOCH: 25
  
  SCHEDULER: 'CosineAnnealingLR' # in [None (empty), 'LambdaLR', 'CosineAnnealingLR']
  TYPE_TOTAL_ITER: 'every' # in ['every', 'all'] / every epoch
### ----- Optimizer ----- ###

### ----- Validation ----- ###
cfg_eval_ver2: True
VAL:
  IS_VALIDATE: True
  IS_CONSIDER_VAL_SUBSET: True
  VAL_PER_EPOCH_SUBSET: 1
  NUM_SUBSET: 500 # 500
  VAL_PER_EPOCH_FULL: 11 # epoch for validate full dataset

  LIST_VAL_CONF_THR: [0.3, 0.5, 0.7]
  LIST_VAL_IOU: [0.7, 0.5, 0.3]
  # This is for logging, change the iou threshold in 'utils/kitti_eval'

  CLASS_VAL_KEYWORD: {
    'Sedan': 'sed',
    'Bus or Truck': 'bus',
    'Motorcycle': 'mot',
    'Bicycle': 'bic',
    'Bicycle Group': 'big',
    'Pedestrian': 'ped',
    'Pedestrian Group': 'peg'
  }

  REGARDING: 'anchor' # in ['anchor']
  LIST_CARE_VAL: ['Sedan', 'Bus or Truck']
### ----- Validation ----- ###

### ----- Visualization ----- ###
VIS:
  # OpenCV
  CLASS_BGR: {
    'Sedan': [0,255,0],
    'Bus or Truck': [0,50,255],
    'Motorcycle': [0,0,255],
    'Bicycle': [0,255,255],
    'Pedestrian': [255,0,0],
    'Pedestrian Group': [255,0,100],
    'Label': [128,128,128]
  }

  # Open3D
  CLASS_RGB: {
    'Sedan': [0, 1, 0],
    'Bus or Truck': [1, 0.2, 0],
    'Motorcycle': [1, 0, 0],
    'Bicycle': [1, 1, 0],
    'Pedestrian': [0, 0, 1],
    'Pedestrian Group': [0.4, 0, 1],
    'Label': [0.5, 0.5, 0.5]
  }
  
  ROI:
    TYPE: 'default' # ['default', 'cube']
    DEFAULT: [0,100,-40,40,-10,60] # x_min_max, y_min_max, z_min_max / Dim: [m]

  # For BEV model visualization
  Z_CENTER: {
    'Sedan': 0.5,
    'Bus or Truck': 1.5,
    'Motorcycle': 0.5,
    'Bicycle': 0.5,
    'Pedestrian': 0.5,
    'Pedestrian Group': 0.5,
  }

  # For BEV model visualization
  Z_HEIGHT: {
    'Sedan': 1.9,
    'Bus or Truck': 1.9,
    'Motorcycle': -1,
    'Bicycle': -1,
    'Pedestrian': 2,
    'Pedestrian Group': -1,
  }
### ----- Visualization ----- ###


### ----- dataset filter ----- ### To train conditional environment // for KRadarDetection_v2_1_demo
IS_DATA_SCENE_FILTERING: False
DATA_SCENE_FILTERING: ['normal', 'overcast', 'fog', 'rain', 'lightsnow'] # normal, overcast, rain, sleet, fog, lightsnow, heavysnow
